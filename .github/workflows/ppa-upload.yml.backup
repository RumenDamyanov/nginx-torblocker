name: PPA Upload (Manual)

on:
  workflow_dispatch:
    inputs:
      ubuntu_releases:
        description: 'Ubuntu releases (comma-separated)'
        required: false
        type: string
        default: 'noble,plucky'
      nginx_snapshot_version:
        description: 'Vendored nginx snapshot version override (optional)'
        required: false
        type: string
      version:
        description: 'Version override (leave empty to use latest tag)'
        required: false
        type: string

permissions:
  contents: read

jobs:
  ppa-upload:
    runs-on: ubuntu-latest
    name: Upload to PPA

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all tags

      - name: Determine version
        id: version
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            GIT_VERSION="${{ github.event.inputs.version }}"
            echo "Using provided version: $GIT_VERSION"
          else
            # Get the latest tag
            GIT_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            if [ -z "$GIT_VERSION" ]; then
              echo "Error: No tags found and no version provided"
              exit 1
            fi
            # Remove 'v' prefix if present for processing
            GIT_VERSION="${GIT_VERSION#v}"
            echo "Using latest tag version: $GIT_VERSION"
          fi

          # Keep original version for git operations
          echo "git_version=$GIT_VERSION" >> $GITHUB_OUTPUT

          # Create Debian-compatible version for packaging
          DEBIAN_VERSION="$GIT_VERSION"
          # Convert beta/alpha/rc versions to Debian format
          if [[ "$GIT_VERSION" =~ ^([0-9]+\.[0-9]+\.[0-9]+)-(beta|alpha|rc)([0-9]+)$ ]]; then
            BASE_VERSION="${BASH_REMATCH[1]}"
            PRE_TYPE="${BASH_REMATCH[2]}"
            PRE_NUM="${BASH_REMATCH[3]}"
            # Convert to Debian pre-release format: 1.0.1~beta4
            DEBIAN_VERSION="${BASE_VERSION}~${PRE_TYPE}${PRE_NUM}"
            echo "Converted version $GIT_VERSION to Debian format: $DEBIAN_VERSION"
          fi

          echo "debian_version=$DEBIAN_VERSION" >> $GITHUB_OUTPUT

      - name: Checkout tag version
        run: |
          echo "üìç Checking out git tag for version ${{ steps.version.outputs.git_version }}"
          # Try with 'v' prefix first, then without
          if git checkout "v${{ steps.version.outputs.git_version }}" 2>/dev/null; then
            echo "‚úÖ Checked out tag v${{ steps.version.outputs.git_version }}"
          elif git checkout "${{ steps.version.outputs.git_version }}" 2>/dev/null; then
            echo "‚úÖ Checked out tag ${{ steps.version.outputs.git_version }}"
          else
            echo "‚ùå Failed to checkout tag ${{ steps.version.outputs.git_version }}"
            echo "Available tags:"
            git tag -l | tail -10
            exit 1
          fi

      - name: Import GPG key
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          # Create GPG directories if they don't exist
          mkdir -p ~/.gnupg
          chmod 700 ~/.gnupg

          # Import GPG key
          echo "$GPG_PRIVATE_KEY" | gpg --batch --import

          # Configure GPG for non-interactive use
          cat >> ~/.gnupg/gpg.conf << EOF
          use-agent
          pinentry-mode loopback
          batch
          yes
          EOF

          cat >> ~/.gnupg/gpg-agent.conf << EOF
          allow-loopback-pinentry
          default-cache-ttl 86400
          max-cache-ttl 86400
          EOF

          # Restart gpg-agent to pick up new config
          gpgconf --kill gpg-agent
          gpgconf --launch gpg-agent

          # Get the key ID for later use
          GPG_KEY_ID=$(gpg --list-secret-keys --keyid-format LONG | grep sec | head -1 | awk '{print $2}' | cut -d'/' -f2)
          if [ -z "$GPG_KEY_ID" ]; then
            echo "‚ùå Failed to extract GPG key ID"
            echo "Available secret keys:"
            gpg --list-secret-keys --keyid-format LONG
            exit 1
          fi
          echo "GPG_KEY_ID=$GPG_KEY_ID" >> $GITHUB_ENV

          # Test GPG signing to ensure it works
          echo "test" | gpg --batch --yes --passphrase "$GPG_PASSPHRASE" --pinentry-mode loopback --armor --detach-sign > /dev/null

          echo "‚úÖ GPG key imported and configured successfully (Key ID: $GPG_KEY_ID)"

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y devscripts dput debhelper build-essential gcc pkg-config curl libpcre2-dev zlib1g-dev libssl-dev

      - name: Ensure vendored nginx snapshot present
        env:
          SNAP_VER_INPUT: ${{ github.event.inputs.nginx_snapshot_version }}
        run: |
          SNAP_VER="${SNAP_VER_INPUT:-}" || true
          if [ -n "$SNAP_VER" ]; then
            echo "Using override snapshot version: $SNAP_VER"
          else
            # Try to read default from debian/rules
            SNAP_VER=$(grep -E 'DEFAULT_NGX_SNAPSHOT_VER *:=' debian/rules | head -1 | awk '{print $3}')
            echo "Detected default snapshot version from debian/rules: $SNAP_VER"
          fi
          export SNAP_VER
          echo "SNAP_VER=$SNAP_VER" >> $GITHUB_ENV
          if [ ! -d "nginx-headers/$SNAP_VER/src/core" ]; then
            echo "Snapshot nginx-headers/$SNAP_VER missing. Generating..."
            if [ ! -x scripts/update-nginx-headers.sh ]; then
              echo "Error: scripts/update-nginx-headers.sh not found or not executable" >&2
              exit 1
            fi
            bash scripts/update-nginx-headers.sh "$SNAP_VER"
            # Add generated snapshot to git index to ensure inclusion in source orig tarball
            git add "nginx-headers/$SNAP_VER"
          else
            echo "Snapshot present: nginx-headers/$SNAP_VER"
          fi
          # Export for debuild
          echo "NGINX_SNAPSHOT_VER=$SNAP_VER" >> $GITHUB_ENV

      - name: Configure dput
        run: |
          cat > ~/.dput.cf << EOF
          [ppa:rumenx/nginx-torblocker]
          fqdn = ppa.launchpad.net
          method = ftp
          incoming = ~rumenx/ubuntu/nginx-torblocker
          login = anonymous
          allow_unsigned_uploads = 0
          EOF

      - name: Build and upload packages
        env:
          DEBIAN_VERSION: ${{ steps.version.outputs.debian_version }}
          GIT_VERSION: ${{ steps.version.outputs.git_version }}
          UBUNTU_RELEASES: ${{ github.event.inputs.ubuntu_releases }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          GPG_KEY_ID: ${{ env.GPG_KEY_ID }}
        run: |
          echo "üì¶ Building packages for git version: $GIT_VERSION"
          echo "üì¶ Using Debian version: $DEBIAN_VERSION"
          echo "üîë Using GPG Key ID: $GPG_KEY_ID"
          echo "üß© Using nginx snapshot version: $NGINX_SNAPSHOT_VER"

          # Convert comma-separated releases to array
          IFS=',' read -ra RELEASES <<< "$UBUNTU_RELEASES"

          for release in "${RELEASES[@]}"; do
            release=$(echo "$release" | xargs)  # trim whitespace
            echo "Building for Ubuntu $release..."

            # Create version for this release using Debian-compatible version
            FULL_VERSION="${DEBIAN_VERSION}-1~${release}1"

            # Generate automated changelog entry
            cp debian/changelog debian/changelog.backup

            # Get git commit messages since last tag for changelog
            LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
            if [ -n "$LAST_TAG" ]; then
              COMMIT_MESSAGES=$(git log --oneline ${LAST_TAG}..HEAD --pretty=format:"  * %s" | head -10)
            else
              COMMIT_MESSAGES="  * Release version $GIT_VERSION"
            fi

            # Create new changelog entry
            # Get GPG identity for changelog
            GPG_EMAIL=$(gpg --list-secret-keys --with-colons | grep uid | head -1 | cut -d':' -f10 | grep -o '<[^>]*>' | tr -d '<>')
            GPG_NAME=$(gpg --list-secret-keys --with-colons | grep uid | head -1 | cut -d':' -f10 | sed 's/<.*>//' | xargs)

            {
              echo "nginx-torblocker ($FULL_VERSION) $release; urgency=medium"
              echo ""
              echo "$COMMIT_MESSAGES"
              echo ""
              echo " -- $GPG_NAME <$GPG_EMAIL>  $(date -R)"
              echo ""
            } > debian/changelog.new

            # Append original changelog
            cat debian/changelog.backup >> debian/changelog.new
            mv debian/changelog.new debian/changelog

            echo "üìù Generated changelog entry for $FULL_VERSION:"
            head -10 debian/changelog

            # Build source package
            echo "üî® Building source package for $FULL_VERSION..."

            # Ensure GPG key ID is available, fallback if needed
            if [ -z "$GPG_KEY_ID" ]; then
              echo "‚ö†Ô∏è GPG_KEY_ID not found, extracting from GPG..."
              GPG_KEY_ID=$(gpg --list-secret-keys --keyid-format LONG | grep sec | head -1 | awk '{print $2}' | cut -d'/' -f2)
              echo "üîë Extracted GPG Key ID: $GPG_KEY_ID"
            fi

            # Configure debuild environment for signing
            export DEBSIGN_KEYID="$GPG_KEY_ID"
            export DEBUILD_DPKG_BUILDPACKAGE_OPTS="-k$GPG_KEY_ID"
            export GPG_TTY=$(tty || echo "notty")

            # Override the email with the GPG key for signing
            GPG_EMAIL=$(gpg --list-secret-keys --with-colons | grep uid | head -1 | cut -d':' -f10 | grep -o '<[^>]*>' | tr -d '<>')
            if [ -n "$GPG_EMAIL" ]; then
              export DEBEMAIL="$GPG_EMAIL"
              export DEBFULLNAME="$(gpg --list-secret-keys --with-colons | grep uid | head -1 | cut -d':' -f10 | sed 's/<.*>//' | xargs)"
            fi

            echo "üîê Debuild signing configuration:"
            echo "  DEBSIGN_KEYID: $DEBSIGN_KEYID"
            echo "  DEBEMAIL: $DEBEMAIL"
            echo "  DEBFULLNAME: $DEBFULLNAME"
            echo "  DEBUILD_DPKG_BUILDPACKAGE_OPTS: $DEBUILD_DPKG_BUILDPACKAGE_OPTS"

            if NGINX_SNAPSHOT_VER="$NGINX_SNAPSHOT_VER" debuild -S -sa; then
              echo "‚úÖ Source package built successfully"
            else
              echo "‚ùå Failed to build source package for $FULL_VERSION"
              exit 1
            fi

            # Verify source package exists
            SOURCE_CHANGES="../nginx-torblocker_${FULL_VERSION}_source.changes"
            if [ ! -f "$SOURCE_CHANGES" ]; then
              echo "‚ùå Source package not found: $SOURCE_CHANGES"
              ls -la ../nginx-torblocker_*
              exit 1
            fi

            # Upload to PPA
            echo "üì§ Uploading $FULL_VERSION to PPA..."
            if dput "ppa:rumenx/nginx-torblocker" "$SOURCE_CHANGES"; then
              echo "‚úÖ Successfully uploaded $FULL_VERSION to rumenx/nginx-torblocker"
            else
              echo "‚ùå Failed to upload $FULL_VERSION"
              exit 1
            fi

            # Restore changelog
            mv debian/changelog.backup debian/changelog

            echo "‚úÖ Completed upload for $FULL_VERSION"
          done

      - name: Summary
        run: |
          echo "üéâ PPA upload completed!"
          echo "üìã Git version: ${{ steps.version.outputs.git_version }}"
          echo "üìã Debian version: ${{ steps.version.outputs.debian_version }}"
          echo ""
          echo "üì¶ Uploaded packages:"
          echo "  - Ubuntu Noble: nginx-torblocker_${{ steps.version.outputs.debian_version }}-1~noble1"
          echo "  - Ubuntu Plucky: nginx-torblocker_${{ steps.version.outputs.debian_version }}-1~plucky1"
          echo ""
          echo "üîó Monitor builds at:"
          echo "  https://launchpad.net/~rumenx/+archive/ubuntu/nginx-torblocker/+packages"
          echo ""
          echo "üì• Install instructions:"
          echo "  sudo add-apt-repository ppa:rumenx/nginx-torblocker"
          echo "  sudo apt update"
          echo "  sudo apt install nginx-torblocker"
